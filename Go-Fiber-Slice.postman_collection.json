{
	"info": {
		"_postman_id": "9c5a3b30-9049-4308-93ec-bcda035c12a1",
		"name": "Go-Fiber-Slice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Albums",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test('response Content-Type header should have application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=UTF-8');\r",
							"});\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals(true);\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('array');\r",
							"}); \r",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const data  = responseJson;\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('data');\r",
							"    pm.expect(data.data).to.be.an('array');\r",
							"    pm.expect(data.data).lengthOf.at.least(1);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/albums",
					"host": [
						"{{host}}"
					],
					"path": [
						"albums"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Album By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test('response Content-Type header should have application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=UTF-8');\r",
							"});\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals(true);\r",
							"    pm.expect(responseJson).to.have.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals(\"Successfuly\");\r",
							"    pm.expect(responseJson).to.have.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"pm.test('response body data should contain object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"    pm.expect(data).to.be.an('object');\r",
							"}); \r",
							"pm.test('response body data should contain id', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('id');\r",
							"    pm.expect(data.id).to.not.equals('');\r",
							"    pm.environment.set('id', data.id);\r",
							"});\r",
							"pm.test('response body data should contain id, title, artist and price', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('id');\r",
							"    pm.expect(data.id).to.not.equals('');\r",
							"    pm.environment.set('id', data.id);\r",
							"    pm.environment.set('title', data.title);\r",
							"    pm.environment.set('artist', data.artist);\r",
							"    pm.environment.set('price', data.price);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/albums/2",
					"host": [
						"{{host}}"
					],
					"path": [
						"albums",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add New Album",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=UTF-8');\r",
							"});\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('code');\r",
							"    pm.expect(responseJson.code).to.equals(201);\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals(true);\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Album created successfuly');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain id', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('id');\r",
							"    pm.expect(data.id).to.not.equals('');\r",
							"    pm.environment.set('id', data.id);\r",
							"});\r",
							"pm.test('response body data should contain id, title, artist and price', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('id');\r",
							"    pm.expect(data.id).to.not.equals('');\r",
							"    pm.environment.set('id', data.id);\r",
							"    pm.environment.set('title', data.title);\r",
							"    pm.environment.set('artist', data.artist);\r",
							"    pm.environment.set('price', data.price);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"artist\": \"{{artist}}\",\r\n    \"price\": {{price}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/albums",
					"host": [
						"{{host}}"
					],
					"path": [
						"albums"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Album By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=UTF-8\");\r",
							"});\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.ownProperty('code');\r",
							"    pm.expect(responseJson.code).to.equals(200);\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals(true);\r",
							"    pm.expect(responseJson).to.have.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Updated successfuly');\r",
							"    pm.expect(responseJson).to.have.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"pm.test('response body data should contain id', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('id');\r",
							"    pm.expect(data.id).to.not.equals('');\r",
							"    pm.environment.set('id', data.id);\r",
							"});\r",
							"pm.test('response body data should contain id, title, artist and price', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('id');\r",
							"    pm.expect(data.id).to.not.equals('');\r",
							"    pm.environment.set('id', data.id);\r",
							"    pm.environment.set('title', data.title);\r",
							"    pm.environment.set('artist', data.artist);\r",
							"    pm.environment.set('price', data.price);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{title_update}}\",\r\n    \"artist\": \"{{artist_update}}\",\r\n    \"price\": {{price_update}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/albums/{{album_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"albums",
						"{{album_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Album By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=UTF-8\");\r",
							"});\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.ownProperty('code');\r",
							"    pm.expect(responseJson.code).to.equals(200);\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals(true);\r",
							"    pm.expect(responseJson).to.have.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Deleted Successfuly');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/albums/{{album_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"albums",
						"{{album_id}}"
					]
				}
			},
			"response": []
		}
	]
}